[
    {
        "id": "d9f0820b013e0f33",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "117250a8d951beb1",
        "type": "inject",
        "z": "d9f0820b013e0f33",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "3729c194a65eb212"
            ]
        ]
    },
    {
        "id": "ddbba5c636c565ab",
        "type": "function",
        "z": "d9f0820b013e0f33",
        "name": "run pyodide",
        "func": "var p = await pyodide.loadPyodide();\n//await p.loadPackage(\"micropip\")\nawait p.loadPackage(\"matplotlib\")\nawait p.loadPackage(\"numpy\")\nmsg.payload = await p.runPythonAsync(msg.payload);\nmsg.payload = Buffer.from(p.FS.readFile(\"out.png\"));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "pyodide",
                "module": "pyodide"
            }
        ],
        "x": 150,
        "y": 280,
        "wires": [
            [
                "ea5cf4fe532e7d2a"
            ]
        ]
    },
    {
        "id": "366c4a75e0ecfe27",
        "type": "template",
        "z": "d9f0820b013e0f33",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import micropip\nawait micropip.install(\"numpy-stl\")\n\nimport numpy as np\nfrom stl import mesh\n# Define the 8 vertices of the cube\nvertices = np.array([\\\n    [-1, -1, -1],\n    [+1, -1, -1],\n    [+1, +1, -1],\n    [-1, +1, -1],\n    [-1, -1, +1],\n    [+1, -1, +1],\n    [+1, +1, +1],\n    [-1, +1, +1]])\n# Define the 12 triangles composing the cube\nfaces = np.array([\\\n    [0,3,1],\n    [1,3,2],\n    [0,4,7],\n    [0,7,3],\n    [4,5,6],\n    [4,6,7],\n    [5,1,2],\n    [5,2,6],\n    [2,3,6],\n    [3,7,6],\n    [0,1,5],\n    [0,5,4]])\n\n# Create the mesh\ncube = mesh.Mesh(np.zeros(faces.shape[0], dtype=mesh.Mesh.dtype))\nfor i, f in enumerate(faces):\n    for j in range(3):\n        cube.vectors[i][j] = vertices[f[j],:]\n\n# Write the mesh to file \"cube.stl\"\ncube.save('cube.stl')",
        "output": "str",
        "x": 440,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "3729c194a65eb212",
        "type": "template",
        "z": "d9f0820b013e0f33",
        "name": "Python code",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import math, numpy, matplotlib, matplotlib.pyplot as pyplot\nx = []\ny = []\nfor i in numpy.arange(0, 10, 0.1):\n  x.append(i)\n  y.append(math.sin(i))\nmatplotlib.use(\"Agg\")\npyplot.plot(x,y)\npyplot.savefig(\"out.png\")",
        "output": "str",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "ddbba5c636c565ab"
            ]
        ]
    },
    {
        "id": "ea5cf4fe532e7d2a",
        "type": "image",
        "z": "d9f0820b013e0f33",
        "name": "",
        "width": "320",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 400,
        "y": 60,
        "wires": []
    }
]